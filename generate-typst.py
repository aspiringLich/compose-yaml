from typing import List, Tuple
import requests
from bs4 import BeautifulSoup
from dataclasses import dataclass

url = "https://typst.app/docs/reference/symbols/sym/"
response = requests.get(url)
soup = BeautifulSoup(response.content, "html.parser")

@dataclass
class Symbol:
    symbol: str
    name: str
    codepoint: str
    char: str
    shorthand: str | None

symbols: List[Symbol] = []

symbol_grid_items = soup.select(".symbol-grid li")
for item in symbol_grid_items:
    s = Symbol(
        symbol = item.attrs["id"][len("symbol-"):],
        name = item.attrs["data-unic-name"],
        codepoint = item.attrs["data-codepoint"],
        char = item.select_one(".sym").text, # type: ignore
        shorthand = item.attrs.get("data-math-shorthand")
    )
    if s.char == '"':
        s.char = "\\\""
    symbols.append(s)
symbols.sort(key=lambda x: x.symbol)

def ident(n):
    return " " * (n * 4)

with open("typst.yaml", "w") as file:
    prefix = []
    file.write("# auto-generated by generate-typst.py\n\n")
    for symbol in symbols:
        split = symbol.symbol.split(".")
        pre = split[:-1]
        post = split[-1]
        if pre != prefix:
            for i in range(0, len(pre)):
                if i >= len(prefix) or pre[i] != prefix[i]:
                    file.write(ident(i) + pre[i] + ":\n")
            prefix = pre
        file.write(ident(len(prefix)) + f'"{post}\\n": "{symbol.char} {symbol.codepoint}" # {symbol.name}\n')

    seen = set()
    # for symbol in symbols:
    #     if symbol.shorthand and symbol.shorthand not in seen:
    #         file.write(f'    "{symbol.shorthand}": "{symbol.char} {symbol.codepoint}" # {symbol.name}\n')
    #         seen.add(symbol.shorthand)
